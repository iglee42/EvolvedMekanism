buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.43-beta'
}

group = mod_group_id
version = minecraft_version + "-" +mod_version

var cleanResources = tasks.register('cleanOldGeneratedResources', Delete) {
    println("Deleting $projectDir/src/generated/resources...")
    delete "$projectDir/src/generated/resources"
}

base {
    archivesName = mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


neoForge {

    version = project.neo_version

    accessTransformers = project.files("src/main/resources/META-INF/accesstransformer.cfg")
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

            programArguments.addAll "--quickPlaySingleplayer","Dev1211"
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')
            taskBefore(cleanResources)
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing-mod','create'
        }


        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven { url 'https://modmaven.dev/' }

    maven { url 'https://maven.iglee.fr/releases/'}

    maven { url = "https://maven.blamejared.com/"}

    maven { url "https://cursemaven.com" }


}

dependencies {

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    implementation "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    implementation "fr.iglee42:IgleeLib:${minecraft_version}-${lib_version}"


    // If you want to test/use Mekanism & its modules during `runClient` invocation, use the following
    implementation "mekanism:Mekanism:${minecraft_version}-${mekanism_version}"// core
    implementation "mekanism:Mekanism:${minecraft_version}-${mekanism_version}:additions"// Mekanism: Additions
    implementation "mekanism:Mekanism:${minecraft_version}-${mekanism_version}:generators"// Mekanism: Generators
    implementation "mekanism:Mekanism:${minecraft_version}-${mekanism_version}:tools"// Mekanism: Tools

    runtimeOnly "curse.maven:ctm-267602:5587515"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            lib_version_range        : lib_version_range,
            mekanism_version_range        : mekanism_version_range,
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name = 'igleeRepo'
            url = "https://${System.getenv("MAVEN_IP")}/releases"
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }
}